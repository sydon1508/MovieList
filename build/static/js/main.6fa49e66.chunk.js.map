{"version":3,"sources":["Common/logo.png","Common/header/Header.js","helpers.js","Common/loading.js","list/List.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","logo","alt","handleResponse","response","json","then","ok","Promise","reject","Loading","List","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","results","genres","error","filterValue","filterList","bind","assertThisInitialized","_this2","apyKey","setState","fetch","concat","data","gen","console","log","catch","status_message","e","target","value","_this3","_this$state","Common_loading","for","id","onChange","filter","item","vote_average","sort","b","popularity","map","movie","key","poster_path","title","genre_ids","genre","name","React","Component","App","Common_header_Header","src_list_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fa49e66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d74d76d0.png\";","import React from \"react\";\r\n\r\nimport logo from \"../../Common/logo.png\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"Header\">\r\n      <div className=\"container\">\r\n        <img src={logo} alt=\"logo\" className=\"Header-logo\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","/**\r\n * Fetch error helper\r\n * @param {object} response\r\n */\r\n\r\nexport const handleResponse = response => {\r\n  return response.json().then(json => {\r\n    return response.ok ? json : Promise.reject(json);\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport \"./Loading.css\";\r\n\r\nconst Loading = () => {\r\n  return <div className=\"Loading\" />;\r\n};\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport { handleResponse } from \"../helpers\";\r\nimport Loading from \"../Common/loading\";\r\nimport { API_URL } from \"../config\";\r\n\r\nimport \"./List.css\";\r\nimport \"../Common/grid.css\";\r\n\r\nclass List extends React.Component {\r\n  static propTypes = {};\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      loading: false,\r\n      results: [],\r\n      genres: [],\r\n      error: \"error\",\r\n      filterValue: 3\r\n    };\r\n\r\n    this.filterList = this.filterList.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const apyKey = \"daeec18d2a4ac71a7f207c6e07ca1a47\";\r\n    this.setState({\r\n      loading: true\r\n    });\r\n\r\n    // fetching data from API\r\n    fetch(`${API_URL}${apyKey}&language=en-US&page=1`)\r\n      .then(handleResponse)\r\n      .then(data => {\r\n        this.setState({\r\n          results: data.results,\r\n          loading: false,\r\n          error: null\r\n        });\r\n      })\r\n      .then(\r\n        fetch(\r\n          //fetching genres list\r\n          `https://api.themoviedb.org/3/genre/movie/list?api_key=${apyKey}&language=en-US`\r\n        )\r\n          .then(handleResponse)\r\n          .then(gen => {\r\n            this.setState({\r\n              genres: gen.genres,\r\n              loading: false\r\n            });\r\n\r\n            console.log(\"Succes Genres\", this.state);\r\n          })\r\n      )\r\n\r\n      .catch(error => {\r\n        this.setState({\r\n          error: error.status_message,\r\n          loading: false\r\n        });\r\n      });\r\n  }\r\n\r\n  //filter movies\r\n  filterList(e) {\r\n    this.setState({\r\n      filterValue: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { loading, error, results } = this.state;\r\n\r\n    //render loading comnonent\r\n    if (loading) {\r\n      return (\r\n        <div className=\"loading-container\">\r\n          <Loading />\r\n        </div>\r\n      );\r\n    }\r\n    // render error message, if error occured while fetching data\r\n    if (error) {\r\n      return <div className=\"error\">{error}</div>;\r\n    }\r\n\r\n    const imagePath = \"https://image.tmdb.org/t/p/w500\";\r\n\r\n    return (\r\n      <div className=\"container clearfix\">\r\n        <div className=\"selectHolder\">\r\n          <label for=\"filterVotes\">Filter by Rating</label>\r\n          <select id=\"filterVotes\" onChange={this.filterList}>\r\n            <option value=\"\">All Movies</option>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"8\">8</option>\r\n            <option value=\"7\">7</option>\r\n            <option value=\"6\">6</option>\r\n            <option value=\"5\">5</option>\r\n            <option value=\"4\">4</option>\r\n            <option value=\"3\">3</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"listHolder\">\r\n          {results\r\n            .filter(item => item.vote_average >= this.state.filterValue) // filter by vote_average\r\n            .sort((a, b) => b.popularity - a.popularity) //sorting by popularity\r\n            .map(movie => (\r\n              <div\r\n                key={movie.id}\r\n                className=\"movie-holder col-20 t-col-33 m-col-50\"\r\n              >\r\n                <img src={`${imagePath}${movie.poster_path}`} />\r\n                <span className=\"votes\">{movie.vote_average}</span>\r\n                <p>{movie.title}</p>\r\n                <div className=\"genreHolder\">\r\n                  {movie.genre_ids.map(genre => (\r\n                    <span key={genre}>\r\n                      {this.state.genres.filter(gen => {\r\n                        if (genre === gen.id) {\r\n                          genre = gen.name;\r\n                        }\r\n                      })}\r\n                      {genre}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","/**\r\n * Global API\r\n */\r\n\r\nexport const API_URL =\r\n  \"https://api.themoviedb.org/3/movie/now_playing?api_key=\";\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport Header from \"./Common/header/Header\";\nimport List from \"./list/List\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <List />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}